openapi: 3.0.0
info:
  version: 1.0.0
  title: GoTrippin Backend API
  description: Open API

servers:
  - url: http://localhost:4000/

tags:
  - name: Todos
    description: API to manage the todos.
  - name: Accommodations
    description: API to manage the accommodations.

paths:
  /todos:
    get:
      summary: Lists all the todos
      tags: [Todos]
      responses:
        "200":
          description: The list of todos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
    post:
      summary: Creates a Todo.
      tags: [Todos]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses: 
        '201':
          description: Created
  /todos/{todoID}:
    get:
      summary: Returns a Todo by ID.
      tags: [Todos]
      parameters:
        - name: todoID
          in: path
          required: true
          description: Todo ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
    put:
      summary: Updates a Todo by ID.
      tags: [Todos]
      parameters:
      - name: todoID
        in: path
        required: true
        description: Todo id to update
        schema:
            type : string
      - name: newText
        in: path
        description: "todolist that needs to be updated"
        required: true
        schema:
          type: string
      
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
    delete:
      summary: Deletes a Todo by ID.
      tags: [Todos]
      parameters:
        - name: todoID
          in: path
          required: true
          description: Todo id to delete
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'

  /accommodation:
    get:
      summary: Lists all the accommodations
      tags: [Accommodations]
      responses:
        "200":
          description: The list of accommodations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accommodation'
    post:
      summary: Creates an accommodation.
      tags: [Accommodations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Accommodation'
      responses: 
        '201':
          description: Created
components:
  schemas:
    Todo:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: The todo item. 
      example:
        text: Trial
    Accommodation:
      type: object
      required:
        - name
        - description
        - image
        - rating
      properties:
        id:
          type: integer
          description: The id of each hotel
        name:
          type: string
          description: The name of the hotel.
        description:
          type: string
          description: The description of the hotel.
        image:
          type: string
          description: The image of the hotel.
        rating:
          type: integer
          description: The rating of the hotel.
      example:
        id: 1
        name: "ITC Kohenur"
        description: "Gachibowli, Hyderabad"
        image: "./images/itc_kohenur.jpg"
        rating: 4
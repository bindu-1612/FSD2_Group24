{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bindu\\\\OneDrive\\\\Desktop\\\\FSDproject\\\\FSD2_Group24\\\\fsd2-group24\\\\frontend\\\\src\\\\components\\\\TodoList.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from 'react';\n// import TodoForm from './TodoForm';\n// import Todo from './Todo';\n// import './Todo.css';\n// import axios from 'axios';\n// function TodoList() {\n//   const [todos, setTodos] = useState([]);\n//   const addTodo = todo => {\n//     if (!todo.text || /^\\s*$/.test(todo.text)) {\n//       return;\n//     }\n//     const newTodos = [todo, ...todos];\n//     setTodos(newTodos);\n//     console.log(...todos);\n//   };\n//  // updating data in json and displaying\n//   const updateTodo = (todoId, newValue) => {\n//     if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n//       return;\n//     }\n//     axios.put('http://localhost:5000/todos/' + todoId, {\n//       \"id\": todoId,\n//       \"text\":newValue.text\n//     })\n//       .then(res => {\n//         console.log(newValue.text);\n//       })\n//       .catch((err) => {\n//         console.log(err);\n//       })\n//     console.log(newValue)\n//     setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n//   };\n//   //To delete data from json file\n//   const removeTodo = id => {\n//     const removedArr = [...todos].filter(todo => todo.id !== id);\n//     setTodos(removedArr);\n//     axios.delete(\"http://localhost:5000/todos/\" + id).then(res => {\n//       console.log(\"Bucket list deleted!!\");\n//       alert(\"Bucket list Deleted!!\")\n//     }).catch(error => {\n//       console.log(error);\n//     })\n//   };\n//   const completeTodo = id => {\n//     let updatedTodos = todos.map(todo => {\n//       if (todo.id === id) {\n//         todo.isComplete = !todo.isComplete;\n//       }\n//       return todo;\n//     });\n//     setTodos(updatedTodos);\n//   };\n//   //Reading json data\n//   useEffect(() => {\n//     fetch('http://localhost:5000/todos').then(res => {\n//       return res.json();\n//     })\n//       .then(data=> {\n//         console.log(data);\n//         setTodos(data);\n//     })\n//   }, [])\n//   return (\n//       <div className =\"todolist\">\n//       <h1 className='h1-todo'>What's the Plan for Today?</h1>\n//       <TodoForm onSubmit={addTodo} />\n//       <Todo todos={todos}\n//         completeTodo={completeTodo}\n//         removeTodo={removeTodo}\n//         updateTodo={updateTodo}\n//         />\n//       </div>\n//   );\n// }\n// export default TodoList;\nimport React, { useState, useEffect, useRef } from 'react'; // import TodoForm from './TodoForm';\n\nimport { TiEdit } from 'react-icons/ti';\nimport './Todo.css';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TodoList() {\n  _s();\n\n  // const [todos, setTodos] = useState([]);\n  const [todoList, settodoList] = useState([]);\n  const [newText, setnewText] = useState(\"\");\n  const [load, setLoad] = useState(false);\n  const [edit, setEdit] = useState({\n    id: null,\n    value: ''\n  });\n  const inputRef = useRef(null);\n  const [text, setText] = useState(edit ? edit.value : ''); // const addTodo = todo => {\n  //   if (!todo.text || /^\\s*$/.test(todo.text)) {\n  //     return;\n  //   }\n  //   const newTodos = [todo, ...todos];\n  //   setTodos(newTodos);\n  //   console.log(...todos);\n  // };\n  // updating data in json and displaying\n  // const updateTodo = (todoId, newValue) => {\n  //   if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n  //     return;\n  //   }\n  //   axios.put('http://localhost:4000/todos/' + todoId, {\n  //     \"text\":newValue.text\n  //   })\n  //     .then(res => {\n  //       console.log(newValue.text);\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     })\n  //   console.log(newValue)\n  //   setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n  // };\n  //To delete data from json file\n  // const removeTodo = id => {\n  //   const removedArr = [...todos].filter(todo => todo.id !== id);\n  //   setTodos(removedArr);\n  //   axios.delete(\"http://localhost:4000/todos/\" + id).then(res => {\n  //     console.log(\"Bucket list deleted!!\");\n  //     alert(\"Bucket list Deleted!!\")\n  //   }).catch(error => {\n  //     console.log(error);\n  //   })\n  // };\n  // const completeTodo = id => {\n  //   let updatedTodos = todos.map(todo => {\n  //     if (todo.id === id) {\n  //       todo.isComplete = !todo.isComplete;\n  //     }\n  //     return todo;\n  //   });\n  //   setTodos(updatedTodos);\n  // };\n  //Reading json data\n  // useEffect(() => {\n  //   fetch('http://localhost:4000/todos').then(res => {\n  //     return res.json();\n  //   })\n  //     .then(data => {\n  //       console.log(data)\n  //       setTodos(data);\n  //   })\n  // }, [])\n  // useEffect(() => {\n  //   axios.get('http://localhost:4000/todos').then((res) => {\n  //     console.log(res);\n  //   })\n  // }, []);\n\n  useEffect(() => {\n    axios.get(\"http://localhost:4000/todos\").then(res => {\n      settodoList(res.data);\n      console.log(res);\n    });\n  }, []);\n\n  const addToList = async () => {\n    await axios.post('http://localhost:4000/todos/', {\n      text: text\n    }).then(res => console.log(\"Added bucket list!!\"));\n    setText('');\n    alert(\"Bucketlist item added!!\");\n    window.location.reload(false);\n  };\n\n  const updateList = async id => {\n    await axios.put(`http://localhost:4000/todos/${id}`, {\n      newText: newText\n    });\n    alert(\"Bucketlist updated\");\n    setnewText('');\n    window.location.reload(false);\n  };\n\n  const DeleteList = async id => {\n    await axios.delete(`http://localhost:4000/todos/${id}`);\n    alert(\"Bucketlist item deleted!!\");\n    window.location.reload(false);\n  };\n\n  const updateSubmit = id => {\n    setEdit({\n      id: id\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todolist\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"h1-todo\",\n      children: \"What's the Plan for Today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Add a bucket list\",\n        type: \"text\",\n        name: \"text\",\n        className: \"todo-input\",\n        value: text,\n        ref: inputRef,\n        onChange: event => {\n          event.preventDefault();\n          setText(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"todo-button\",\n        onClick: addToList,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), edit.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Update your list\",\n        className: \"todo-input-edit\",\n        ref: inputRef,\n        onChange: event => {\n          setnewText(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 20\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"todo-button edit\",\n        onClick: () => updateList(edit.id),\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true) : '', todoList.map((val, key) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: val.isComplete ? 'todo-row complete' : 'todo-row',\n        children: [val.text, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icons\",\n          children: [/*#__PURE__*/_jsxDEV(RiCloseCircleLine, {\n            className: \"delete-icon\",\n            onClick: () => DeleteList(val._id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TiEdit, {\n            onClick: () => updateSubmit(val._id),\n            className: \"edit-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TodoList, \"MEcvsxxvnuYhky1WkjZg5zCg3DU=\");\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["C:/Users/Bindu/OneDrive/Desktop/FSDproject/FSD2_Group24/fsd2-group24/frontend/src/components/TodoList.js"],"names":["React","useState","useEffect","useRef","TiEdit","RiCloseCircleLine","axios","TodoList","todoList","settodoList","newText","setnewText","load","setLoad","edit","setEdit","id","value","inputRef","text","setText","get","then","res","data","console","log","addToList","post","alert","window","location","reload","updateList","put","DeleteList","delete","updateSubmit","event","preventDefault","target","map","val","key","isComplete","_id"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD,C,CACA;;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,OAAO,YAAP;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC;AAC/Be,IAAAA,EAAE,EAAE,IAD2B;AAE/BC,IAAAA,KAAK,EAAE;AAFwB,GAAD,CAAhC;AAIA,QAAMC,QAAQ,GAAGf,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM,CAACgB,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAACa,IAAI,GAAGA,IAAI,CAACG,KAAR,GAAgB,EAArB,CAAhC,CAVkB,CAYlB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAC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","sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import TodoForm from './TodoForm';\r\n// import Todo from './Todo';\r\n// import './Todo.css';\r\n// import axios from 'axios';\r\n// function TodoList() {\r\n//   const [todos, setTodos] = useState([]);\r\n\r\n//   const addTodo = todo => {\r\n//     if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n//       return;\r\n//     }\r\n//     const newTodos = [todo, ...todos];\r\n//     setTodos(newTodos);\r\n//     console.log(...todos);\r\n\r\n//   };\r\n\r\n//  // updating data in json and displaying\r\n//   const updateTodo = (todoId, newValue) => {\r\n//     if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n//       return;\r\n//     }\r\n//     axios.put('http://localhost:5000/todos/' + todoId, {\r\n//       \"id\": todoId,\r\n//       \"text\":newValue.text\r\n//     })\r\n//       .then(res => {\r\n//         console.log(newValue.text);\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err);\r\n//       })\r\n//     console.log(newValue)\r\n//     setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n//   };\r\n\r\n//   //To delete data from json file\r\n//   const removeTodo = id => {\r\n//     const removedArr = [...todos].filter(todo => todo.id !== id);\r\n//     setTodos(removedArr);\r\n//     axios.delete(\"http://localhost:5000/todos/\" + id).then(res => {\r\n//       console.log(\"Bucket list deleted!!\");\r\n//       alert(\"Bucket list Deleted!!\")\r\n//     }).catch(error => {\r\n//       console.log(error);\r\n//     })\r\n//   };\r\n\r\n//   const completeTodo = id => {\r\n//     let updatedTodos = todos.map(todo => {\r\n//       if (todo.id === id) {\r\n//         todo.isComplete = !todo.isComplete;\r\n//       }\r\n//       return todo;\r\n//     });\r\n//     setTodos(updatedTodos);\r\n//   };\r\n  \r\n//   //Reading json data\r\n//   useEffect(() => {\r\n//     fetch('http://localhost:5000/todos').then(res => {\r\n//       return res.json();\r\n//     })\r\n//       .then(data=> {\r\n//         console.log(data);\r\n//         setTodos(data);\r\n//     })\r\n//   }, [])\r\n\r\n//   return (\r\n//       <div className =\"todolist\">\r\n//       <h1 className='h1-todo'>What's the Plan for Today?</h1>\r\n//       <TodoForm onSubmit={addTodo} />\r\n//       <Todo todos={todos}\r\n//         completeTodo={completeTodo}\r\n//         removeTodo={removeTodo}\r\n//         updateTodo={updateTodo}\r\n//         />\r\n//       </div>\r\n//   );\r\n// }\r\n\r\n// export default TodoList;\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\n// import TodoForm from './TodoForm';\r\nimport { TiEdit } from 'react-icons/ti';\r\nimport './Todo.css';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport axios from 'axios';\r\n\r\nfunction TodoList() {\r\n  // const [todos, setTodos] = useState([]);\r\n  const [todoList, settodoList] = useState([])\r\n  const [newText, setnewText] = useState(\"\")\r\n  const [load, setLoad] = useState(false);\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n  const inputRef = useRef(null);\r\n  const [text, setText] = useState(edit ? edit.value : '');\r\n\r\n  // const addTodo = todo => {\r\n  //   if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n  //     return;\r\n  //   }\r\n  //   const newTodos = [todo, ...todos];\r\n  //   setTodos(newTodos);\r\n  //   console.log(...todos);\r\n\r\n  // };\r\n\r\n  // updating data in json and displaying\r\n  // const updateTodo = (todoId, newValue) => {\r\n  //   if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n  //     return;\r\n  //   }\r\n  //   axios.put('http://localhost:4000/todos/' + todoId, {\r\n  //     \"text\":newValue.text\r\n  //   })\r\n  //     .then(res => {\r\n  //       console.log(newValue.text);\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //     })\r\n  //   console.log(newValue)\r\n  //   setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n  // };\r\n\r\n  //To delete data from json file\r\n  // const removeTodo = id => {\r\n  //   const removedArr = [...todos].filter(todo => todo.id !== id);\r\n  //   setTodos(removedArr);\r\n  //   axios.delete(\"http://localhost:4000/todos/\" + id).then(res => {\r\n  //     console.log(\"Bucket list deleted!!\");\r\n  //     alert(\"Bucket list Deleted!!\")\r\n  //   }).catch(error => {\r\n  //     console.log(error);\r\n  //   })\r\n  // };\r\n\r\n  // const completeTodo = id => {\r\n  //   let updatedTodos = todos.map(todo => {\r\n  //     if (todo.id === id) {\r\n  //       todo.isComplete = !todo.isComplete;\r\n  //     }\r\n  //     return todo;\r\n  //   });\r\n  //   setTodos(updatedTodos);\r\n  // };\r\n\r\n  //Reading json data\r\n  // useEffect(() => {\r\n  //   fetch('http://localhost:4000/todos').then(res => {\r\n  //     return res.json();\r\n  //   })\r\n  //     .then(data => {\r\n  //       console.log(data)\r\n  //       setTodos(data);\r\n  //   })\r\n  // }, [])\r\n  // useEffect(() => {\r\n\r\n  //   axios.get('http://localhost:4000/todos').then((res) => {\r\n  //     console.log(res);\r\n  //   })\r\n  // }, []);\r\n  useEffect(() => {\r\n    axios.get(\"http://localhost:4000/todos\").then((res) => {\r\n      settodoList(res.data)\r\n      console.log(res)\r\n    })\r\n  }, [])\r\n\r\n  const addToList = async () => {\r\n    await axios.post('http://localhost:4000/todos/', { text: text }).then(res => console.log(\"Added bucket list!!\"))\r\n    setText('')\r\n    alert(\"Bucketlist item added!!\")\r\n    window.location.reload(false);\r\n  }\r\n  const updateList = async (id) => {\r\n    await axios.put(`http://localhost:4000/todos/${id}`, {\r\n      newText: newText\r\n    })\r\n    alert(\"Bucketlist updated\")\r\n    setnewText('')\r\n    window.location.reload(false);\r\n  }\r\n  const DeleteList = async (id) => {\r\n    await axios.delete(`http://localhost:4000/todos/${id}`)\r\n    alert(\"Bucketlist item deleted!!\")\r\n    window.location.reload(false);\r\n  }\r\n  const updateSubmit = (id) => {\r\n    setEdit({ id: id })\r\n  }\r\n  return (\r\n    <div className=\"todolist\">\r\n      <h1 className='h1-todo'>What's the Plan for Today?</h1>\r\n      {/* <TodoForm /> */}\r\n      <><input\r\n        placeholder='Add a bucket list'\r\n        type=\"text\"\r\n        name=\"text\"\r\n        className='todo-input'\r\n        value={text}\r\n        ref={inputRef}\r\n        onChange={(event) => {\r\n          event.preventDefault();\r\n          setText(event.target.value)\r\n        }}\r\n      />\r\n        <button className='todo-button' onClick={addToList}>\r\n          Add\r\n        </button>\r\n      </>\r\n\r\n      <br />\r\n\r\n      {edit.id ? <><input\r\n        placeholder='Update your list'\r\n        className='todo-input-edit'\r\n        ref={inputRef}\r\n        onChange={(event) => {\r\n          setnewText(event.target.value);\r\n        }} /><button className='todo-button edit' onClick={() => updateList(edit.id)}>\r\n          Update\r\n        </button></> : ''}\r\n\r\n      {todoList.map((val, key) => {\r\n        return <div\r\n          className={val.isComplete ? 'todo-row complete' : 'todo-row'}\r\n          key={key}\r\n        >\r\n          {val.text}\r\n          <div className='icons'>\r\n            {/* Onclick it will remove the bucketlist item */}\r\n            <RiCloseCircleLine\r\n              className='delete-icon'\r\n              onClick={() => DeleteList(val._id)}\r\n            />\r\n            {/* Onclick it will update the bucketlist item from db*/}\r\n            <TiEdit\r\n              onClick={() => updateSubmit(val._id)}\r\n              className='edit-icon'\r\n            />\r\n          </div>\r\n\r\n\r\n        </div>\r\n      }\r\n\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}